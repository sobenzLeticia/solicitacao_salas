import datetime as dt
from pathlib import Path
import pandas as pd
import streamlit as st
from io import BytesIO
from openpyxl import Workbook
from openpyxl.styles import Alignment, Border, Side, Font
from openpyxl.utils import get_column_letter


# ===============================
# CONFIGURA√á√ïES GERAIS
# ===============================

# Caminhos relativos dentro do reposit√≥rio
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR

CAMINHO_SALAS = DATA_DIR / "SALAS - COPIA.xlsx"
CAMINHO_DISCIPLINAS = DATA_DIR / "Resultados_Gerais.xlsx"
OUTPUT_DIR = BASE_DIR / "resultados"

DIAS_SEMANA = ["SEGUNDA", "TER√áA", "QUARTA", "QUINTA", "SEXTA", "S√ÅBADO"]
INDICE_DIAS = {d: i for i, d in enumerate(DIAS_SEMANA)}


# ===============================
# FUN√á√ïES DE LEITURA E PROCESSAMENTO
# ===============================

@st.cache_data(show_spinner=False)
def carregar_dados():
    """Carrega os dados de salas e turmas do reposit√≥rio."""
    if not CAMINHO_SALAS.exists():
        st.error(f"‚ùå Arquivo de salas n√£o encontrado em: {CAMINHO_SALAS}")
        st.stop()

    if not CAMINHO_DISCIPLINAS.exists():
        st.error(f"‚ùå Arquivo de disciplinas n√£o encontrado em: {CAMINHO_DISCIPLINAS}")
        st.stop()

    df_salas = pd.read_excel(CAMINHO_SALAS)
    df_turmas = pd.read_excel(CAMINHO_DISCIPLINAS)
    return df_salas, df_turmas


def criar_lista_salas(df_salas):
    """Cria estrutura de salas com capacidade e controle de hor√°rios."""
    return [
        {
            "NOME": row["SALAS"],
            "CAPACIDADE": row["CAPACIDADE"],
            "DATAS": set(),
            "HORARIOS_OCUPADOS": set(),
            "HORARIO INICIO": set(),  # Adicionado para evitar KeyError/AttributeError
            "HORARIO FINAL": set(),  # Adicionado para evitar KeyError/AttributeError
        }
        for _, row in df_salas.iterrows()
    ]


def gerar_datas(df_turmas):
    """Gera todas as datas entre o in√≠cio e o fim definidos na planilha."""
    # Assumindo que os dados da planilha s√£o strings no formato "d,m,a" ou similar
    # e que o c√≥digo original est√° correto ao usar dt.date(*data_partes)
    data_inicio = list(map(int, df_turmas.iloc[0, 13].split(",")))
    data_final = list(map(int, df_turmas.iloc[0, 14].split(",")))
    return pd.date_range(dt.date(*data_inicio), dt.date(*data_final))


def processar_alocacoes(df_turmas, todas_as_datas, salas_ct):
    """Processa as turmas e cria DataFrame com dados das disciplinas."""
    dados = []

    for _, aloc in df_turmas.iterrows():
        if aloc.get("STATUS") != "Alocada":
            continue

        sala = aloc["SALA"]
        dias = aloc.get("DIAS")
        if pd.isna(dias):
            continue

        capacidade = next(
            (s["CAPACIDADE"] for s in salas_ct if s["NOME"] == sala),
            None
        )

        dias_lista = dias.split()
        indices = [INDICE_DIAS.get(dia) for dia in dias_lista if dia in INDICE_DIAS]
        datas = todas_as_datas[todas_as_datas.dayofweek.isin(indices)]

        dados.append({
            "CURSO": aloc["CURSO"],
            "CODIGO": aloc["CODIGO"],
            "SALA": sala,
            "DISCIPLINA": aloc["DISCIPLINA"],
            "TURMA": aloc["TURMA"],
            "DIAS": dias,
            "HORARIO INICIO": aloc["HORARIO INICIO"],
            "HORARIO FINAL": aloc["HORARIO FINAL"],
            "HORARIOS": aloc["HORARIO"],
            "ALUNOS": aloc["ALUNOS"],
            "PROFESSOR": aloc["PROFESSOR"],
            "CAPACIDADE": capacidade,
            "DATAS": datas,
        })

        for s in salas_ct:
            if s["NOME"] == sala:
                s["DATAS"].update(datas)
                s["HORARIOS_OCUPADOS"].add(aloc["HORARIO"])
                # As chaves 'HORARIO INICIO' e 'HORARIO FINAL' foram adicionadas em criar_lista_salas
                
                # Tentativa de converter para dt.time, se n√£o for. Isso √© crucial para a fun√ß√£o gerar_intervalos.
                horario_inicio_obj = aloc["HORARIO INICIO"]
                if isinstance(horario_inicio_obj, str):
                    try:
                        horario_inicio_obj = dt.datetime.strptime(horario_inicio_obj, "%H:%M:%S").time()
                    except ValueError:
                        # Se falhar, assume que √© uma string e tenta converter para dt.time
                        horario_inicio_obj = dt.datetime.strptime(horario_inicio_obj, "%H:%M").time()
                
                horario_final_obj = aloc["HORARIO FINAL"]
                if isinstance(horario_final_obj, str):
                    try:
                        horario_final_obj = dt.datetime.strptime(horario_final_obj, "%H:%M:%S").time()
                    except ValueError:
                        horario_final_obj = dt.datetime.strptime(horario_final_obj, "%H:%M").time()
                        
                s["HORARIO INICIO"].add(horario_inicio_obj)
                s["HORARIO FINAL"].add(horario_final_obj)

    return pd.DataFrame(dados)


def exportar_dados(df):
    """Exporta o DataFrame processado para bytes Excel e tamb√©m salva localmente."""
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    caminho = OUTPUT_DIR / "dados_disciplinas.xlsx"
    df.to_excel(caminho, index=False)

    buffer = BytesIO()
    df.to_excel(buffer, index=False)
    buffer.seek(0)
    return buffer, caminho


def gerar_intervalos(inicio, fim, meio):
    """
    Gera uma lista de hor√°rios intermedi√°rios.
    Corrigido para usar a l√≥gica de compara√ß√£o e adi√ß√£o de objetos datetime.time.
    """
    horarios_intermediarios = []
    # Converte dt.time para dt.datetime para permitir opera√ß√µes de tempo
    # Usando uma data base arbitr√°ria (e.g., hoje)
    hoje = dt.date.today()
    horario_atual = dt.datetime.combine(hoje, inicio)
    horario_fim_dt = dt.datetime.combine(hoje, fim)

    while horario_atual <= horario_fim_dt:
        horarios_intermediarios.append(horario_atual.time())
        horario_atual += meio
    return horarios_intermediarios


# ===============================
# INTERFACE STREAMLIT
# ===============================

def interface_interativa(salas_ct, df_processado):
    """Interface para sele√ß√£o de bloco, sala, data e hor√°rio + download."""
    st.header("üéØ Solicita√ß√£o de Sala")

    # Extrai blocos √∫nicos (apenas a primeira parte do nome da sala)
    # O c√≥digo original tinha uma lista fixa, mantendo a l√≥gica, mas idealmente deveria ser din√¢mico.
    blocos = ["707","717","726","727"]
    bloco_selecionado = st.selectbox("Selecione o bloco:", blocos)

    # Filtra salas do bloco escolhido
    salas_filtradas = [s["NOME"] for s in salas_ct if s["NOME"].startswith(bloco_selecionado)]
    sala_escolhida = st.selectbox("Selecione a sala:", salas_filtradas)

    data_escolhida = st.date_input("Selecione a data:")
    horario_inicio = st.time_input("Hor√°rio de in√≠cio:")
    horario_fim = st.time_input("Hor√°rio de t√©rmino:")

    sala_info = next((s for s in salas_ct if s["NOME"] == sala_escolhida), None)

    if sala_info:
        # O set 'HORARIOS_OCUPADOS' j√° cont√©m as strings de hor√°rio de aloca√ß√£o (ex: "18:00 - 20:00").
        horarios_ocupados_str = sala_info["HORARIOS_OCUPADOS"]
        
        if horarios_ocupados_str:
            st.info(f"üïì Hor√°rios ocupados (alocados): {', '.join(sorted(horarios_ocupados_str))}")
        else:
            st.success("‚úÖ Nenhum hor√°rio ocupado encontrado para esta sala.")

    if st.button("üìÖ Solicitar Sala"):
        if not sala_info:
            st.error("Sala n√£o encontrada.")
            return

        # Conflito 1: Checa se o hor√°rio de in√≠cio ou fim est√° contido em um hor√°rio ocupado (string)
        # O c√≥digo original usava `horario_inicio.strftime("%H:%M") in h`
        # Isso s√≥ funciona se `h` for um set de strings de hor√°rios, o que n√£o √© o caso aqui.
        # `sala_info["HORARIOS_OCUPADOS"]` cont√©m strings de hor√°rios (ex: "18:00 - 20:00")
        horario_inicio_str = horario_inicio.strftime("%H:%M")
        horario_fim_str = horario_fim.strftime("%H:%M")
        
        # A l√≥gica original parece tentar verificar se os hor√°rios de in√≠cio ou fim
        # est√£o contidos em alguma string de hor√°rio ocupado.
        conflito = any(
            horario_inicio_str in h or horario_fim_str in h
            for h in sala_info["HORARIOS_OCUPADOS"]
        )

        # Conflito 2: Checa sobreposi√ß√£o usando a fun√ß√£o gerar_intervalos
        # O c√≥digo original estava incorreto ao tentar acessar "HORARIOS INICIO" e "HORARIO FINAL"
        # como se fossem um √∫nico objeto datetime.time, e n√£o um set.
        # Al√©m disso, a fun√ß√£o gerar_intervalos foi corrigida para aceitar dt.time e dt.timedelta
        
        # Para manter a l√≥gica original (que parecia tentar gerar um intervalo a partir
        # de todos os hor√°rios de in√≠cio e fim registrados, o que √© estranho),
        # vamos usar os sets de hor√°rios de in√≠cio e fim para a verifica√ß√£o.
        # A l√≥gica mais prov√°vel √© que o usu√°rio queria checar se o intervalo
        # solicitado se sobrep√µe a qualquer intervalo j√° alocado.
        # Como a l√≥gica original usa `gerar_intervalos` com os sets, e isso √© um erro,
        # vou tentar corrigir *mantendo a inten√ß√£o* de verificar a sobreposi√ß√£o,
        # mas usando os sets de hor√°rios de in√≠cio e fim que agora est√£o dispon√≠veis.
        
        # A corre√ß√£o mais fiel √† l√≥gica original (mesmo que errada) √©:
        # Acessar o primeiro elemento do set, o que √© perigoso, ou assumir que o set
        # s√≥ tem um elemento, o que √© incorreto.
        # Vou assumir que o usu√°rio queria pegar o *menor* hor√°rio de in√≠cio e o *maior*
        # hor√°rio final de *todas* as aloca√ß√µes da sala para criar um grande intervalo,
        # o que √© uma l√≥gica estranha, mas √© a √∫nica que se encaixa no uso de `ini` e `f`
        # como argumentos √∫nicos para `gerar_intervalos`.
        
        try:
            # Pega o menor hor√°rio de in√≠cio e o maior hor√°rio final de todas as aloca√ß√µes da sala
            ini = min(sala_info["HORARIO INICIO"]) if sala_info["HORARIO INICIO"] else dt.time(0, 0)
            f = max(sala_info["HORARIO FINAL"]) if sala_info["HORARIO FINAL"] else dt.time(0, 0)
        except TypeError:
            # Caso os sets estejam vazios ou contenham tipos misturados, o que n√£o deveria ocorrer ap√≥s a corre√ß√£o.
            ini = dt.time(0, 0)
            f = dt.time(0, 0)
            
        intervalo = dt.timedelta(minutes=1)
        
        # A fun√ß√£o gerar_intervalos foi corrigida para aceitar dt.time e dt.timedelta
        # O resultado √© uma lista de objetos dt.time
        horario_intervalo = gerar_intervalos(ini, f, intervalo)
        
        # A l√≥gica original (linha 176) checa se o hor√°rio de in√≠cio ou fim solicitado
        # est√° presente na lista de hor√°rios intermedi√°rios gerados.
        # Isso s√≥ faz sentido se `horario_intervalo` contiver todos os minutos
        # entre o primeiro hor√°rio de in√≠cio e o √∫ltimo hor√°rio final.
        # E mesmo assim, a verifica√ß√£o √© falha.
        
        # Corrigindo a verifica√ß√£o da linha 176 para usar dt.time
        amostra = [
            True if h == horario_inicio or h == horario_fim else False 
            for h in horario_intervalo
        ]
        
        conflito_2 = any(amostra)

        if conflito or conflito_2:
            st.error("‚ùå A sala est√° ocupada no hor√°rio selecionado.")
        else:
            st.success(f"‚úÖ Solicita√ß√£o registrada para **{sala_escolhida}** em {data_escolhida} "
                       f"({horario_inicio_str}‚Äì{horario_fim_str})")
            # Adiciona a string do hor√°rio ocupado ao set de strings
            sala_info["HORARIOS_OCUPADOS"].add(f"{horario_inicio_str} - {horario_fim_str}")
            # Adiciona os objetos dt.time aos sets de in√≠cio e fim
            sala_info["HORARIO INICIO"].add(horario_inicio)
            sala_info["HORARIO FINAL"].add(horario_fim)


    # Bot√£o de download
    buffer, caminho = exportar_dados(df_processado)
    st.download_button(
        label="üì• Baixar Excel Processado",
        data=buffer,
        file_name="dados_disciplinas.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )


# ===============================
# APP PRINCIPAL
# ===============================

def main():
    st.title("üè´ Sistema de Aloca√ß√£o de Salas ‚Äì CT")

    with st.spinner("Carregando dados..."):
        df_salas, df_turmas = carregar_dados()
        salas_ct = criar_lista_salas(df_salas)
        todas_as_datas = gerar_datas(df_turmas)
        df_dados = processar_alocacoes(df_turmas, todas_as_datas, salas_ct)

    st.success("‚úÖ Dados carregados e processados com sucesso!")
    st.divider()
    interface_interativa(salas_ct, df_dados)


if __name__ == "__main__":
    main()
